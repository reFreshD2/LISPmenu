(setq products '(("Колбаса" 5) ("Сыр" 2) ("Тесто" 2) ("Макароны" 1)))
(setq recipe '(("Пицца" (("Колбаса" 2) ("Сыр" 1) ("Тесто" 1))) ("Сосиска в тесте" (("Колбаса" 1) ("Тесто" 1))) ("Карбонара" (("Колбаса" 2) ("Сыр" 1) ("Макароны" 1)))))
(defun makeMenu (availProducts recipes)
(cond
    ((NULL recipes) NIL)
    ((eq T (haveProducts availProducts (CADAR recipes))) (cons (CAAR recipes) (makeMenu (dif availProducts (CADAR recipes)) (CDR recipes))))
    (T (makeMenu availProducts (CDR recipes)))
)
)
(defun haveProducts (availProducts productOfRecipe)
(cond
    ((NULL availProducts) T)
    ((>= (CADAR availProducts) (findProductCost (CAAR availProducts) productOfRecipe)) (haveProducts (CDR availProducts) productOfRecipe))
    (T NIL)
)
)
(defun findProductCost (product source)
(cond
    ((NULL source) 0)
    ((string-equal product (CAAR source)) (CADAR source))
    (T (findProductCost product (CDR source)))
)
)
(defun dif (availProduct productOfRecipe)
(cond
    ((NULL availProduct) NIL)
    (T (cons (list (CAAR availProduct) (- (CADAR availProduct) (findProductCost (CAAR availProduct) productOfRecipe))) (dif (CDR availProduct) productOfRecipe)))
)
)
(defun allMenu (products recipes)
(cond
    ((NULL recipes) NIL)
    (T (cons (makeMenu products (CAR recipes)) (allMenu products (CDR recipes))))
)
)
(defun comb (recipes)
    (cond
        ((NULL (CDR recipes)) NIL)
        (T (cons (list (CAR recipes) (CADR recipes)) (comb (cons (CAR recipes) (CDDR recipes)))))
    )
)
(defun all-comb (recipes)
(cond
    ((NULL recipes) NIL)
    (T (cons (comb recipes) (all-comb (CDR recipes))))
)
)
(print(allMenu products recipe))